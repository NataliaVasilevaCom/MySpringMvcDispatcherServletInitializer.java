/**Класс User должен иметь следующую структуру:

Поля:
Строковое поле “имя пользователя” (англ. username)
Список, параметризованный классом User, с названием “подписки” (англ. subscriptions). В этом списке должны храниться те пользователи, 
на которых подписан пользователь.

Конструктор:
Должен принимать в качестве аргумента только имя пользователя. Также, должен инициализировать поле “подписки” пустым списком.

Методы:
Геттеры на все поля

public void subscribe(User user) - подписывает пользователя на пользователя user

public boolean isSubscribed(User user) - возвращает True, если пользователь подписан на пользователя user и False, если не подписан.

public boolean isFriend(User user) - возвращает True, если пользователь user является другом и False, если пользователь user не является другом. Подумайте, 
что такое дружба в контексте соц. сетей.

public void sendMessage(User user, String text) - отправляет сообщение с текстом text пользователю user. Здесь должен использоваться статический метод из 
MessageDatabase.

public String toString() - возвращает строковое представление пользователя (имя пользователя).
*/

public class User {
  private String username;
  private List<User> subscriptions;
  private List<User> friends;
  
  public User(String username) {
    this.username = username;
    this.subscriptions = new ArraList<>();
    this.friends = new ArraList<>();
  }
  
  public String getUsername() {
    return username;
  }

  public List<User> getSubscriptions() {
    return subscriptions;
  }
  public void subscribe(User user){// подписывает пользователя на пользователя user
    
  }
  
  public boolean isSubscribed(User user){ // возвращает True, если пользователь подписан на пользователя user и False, если не подписан.
    return this.getSubscriptions().contains(user);
  }
  
  public boolean isFriend(User user) {//возвращает True, если пользователь user является другом и False, если пользователь user не является другом. Подумайте, 
  //что такое дружба в контексте соц. сетей.
    return this.getFriends().contains(user);
  }

  public void sendMessage(User user, String text) {//отправляет сообщение с текстом text пользователю user. Здесь должен использоваться статический метод из 
  //MessageDatabase.
  }

  public String toString() {//возвращает строковое представление пользователя (имя пользователя).
    
  }
}
////////////////////////////////////////////
public class Message {
  private String sender;
  private String receiver;
  private String text;
  private Date date;
  
  public Message(String sender, String receiver, String text) {
    this.sender = sender;
    this.receiver = receiver;
    this.text = text;
    this.date = new Date();
  }
  
  public String getSender() {
    return sender;
  }

  public String getReceiver() {
    return receiver;
  }
  public String getText() {
    return text;
  }
  public Date getDate() {
    return date;
  }
  public String toString() {//возвращает строковое представление пользователя (имя пользователя).
    return "FROM: " + sender + " TO: " + receiver + " ON: " + date + text";
  }
}
