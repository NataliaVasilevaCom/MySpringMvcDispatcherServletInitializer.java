///////////////////////////////////////////////////////////////task1///////////////////////////
/**Создать список строк, добавить в него 5 марок автомобилей, вывести список в консоль. Добавить в середину еще 1 автомобиль, 
удалить самый первый автомобиль из списка. Вывести список в консоль.*/
List<String> list = new ArrayList<>();
list.add("Kia");
list.add("Toyota");
list.add("Audi");
list.add("Mazda");
list.add("Reno");
System.out.println(list);

list.set(2, "Mercedes");
list.remove(0);
System.out.println(list);
///////////////////////////////////////////////////////////////task2///////////////////////////
/**2. Создать новый список, заполнить его четными числами от 0 до 30 и от 300 до 350. 
Для заполнения списка реализуйте метод, который принимает числа от, до, и ссылку на список. Вывести список.*/
List<Integer> list = new ArrayList<>();
for(int i = 0; i < 350; i++) {
  if(i%0==0) {
      list.add(i);
  }
}
List<Integer> listNew1 = list.subList(0, 30);
List<Integer> listNew2 = list.subList(300, 350);
listNew1 = listNew1.addAll(listNew2);
///////////////////////////////////////////////////////////////task3///////////////////////////
/**Выполнять в подпапке task3 в day12* 
Создать класс Музыкальная Группа (англ. MusicBand) с полями name и year (название музыкальной группы и год основания). Создать 10 или более экземпляров класса 
MusicBand , добавить их в список (выбирайте такие музыкальные группы, которые были созданы как до 2000 года, так и после, жанр не важен). Перемешать список. 
Создать статический метод в классе Task3:
public static List<MusicBand> groupsAfter2000(List<MusicBand> bands)
Этот метод принимает список групп в качестве аргумента и возвращает новый список, состоящий из групп, основанных после 2000 года. Вызвать метод 
groupsAfter2000(List<MusicBand> bands) в методе main() на вашем списке из 10 групп. Вывести в консоль оба списка (оригинальный и с группами, 
основанными после 2000 года).*/
public class MusicBand{
  private String name;
  private int year;
  
  public MusicBand(String name, int year){
    this.name=name;
    this.year=year;
  }
  
  public int getYear() {
    return year;
  }
  
  public static List<MusicBand> groupsAfter2000(List<MusicBand> bands){
  List<Integer> list = new ArrayList<>();
  for(MusicBand musicBand : bands) {
    if(musicBand.getYear()>2000) {
        list.add(musicBand);
    }
  }
  return list;
}
  }
  MusicBand musicBand1 = new MusicBand("Kiss", 1973);
  MusicBand musicBand2 = new MusicBand("Led Zeppelin", 1968);
  MusicBand musicBand3 = new MusicBand("Queen", 1970);
  MusicBand musicBand4 = new MusicBand("AC/DC", 1973);
  MusicBand musicBand5 = new MusicBand("Metallica", 1981);
  MusicBand musicBand6 = new MusicBand("Animal ДжаZ", 2000);
  MusicBand musicBand7 = new MusicBand("Lady Gaga", 2009);
  MusicBand musicBand8 = new MusicBand("Norah Jones", 2002);
  MusicBand musicBand9 = new MusicBand("Rihanna", 2005);
  MusicBand musicBand10 = new MusicBand("Maroon 5", 2002);
  
  List<String> list = new ArrayList<>();
  list.add(musicBand1);
  list.add(musicBand2);
  list.add(musicBand3);
  list.add(musicBand4);
  list.add(musicBand5);
  list.add(musicBand6);
  list.add(musicBand7);
  list.add(musicBand8);
  list.add(musicBand9);
  list.add(musicBand10);
}

List<String> bandsAfter2000 = groupsAfter2000(list);
System.out.println(list);
System.out.println(bandsAfter2000);
///////////////////////////////////////////////////////////////task4///////////////////////////
*Выполнять в подпапке task4 в day12*
Скопировать MusicBand из прошлого задания и доработать таким образом, чтобы в группу можно было добавлять и удалять участников списком 
(по несколько участников за раз, а не по одному). Под участником понимается строка (String) с именем и фамилией. Реализовать статический метод слияния групп 
(в классе MusicBand), т.е. все участники группы А переходят в группу B. Название метода: transferMembers. Этот метод принимает в качестве аргументов два 
экземпляра класса MusicBand. В классе MusicBand, реализовать метод printMembers(), печатающий список участников в консоль и метод getMembers(), 
возвращающий список участников.
Проверить состав групп после слияния.
public class MusicBand{
  private String name;
  private int year;
  private List<String> members;
  
  public MusicBand(String name, int year){
    this.name=name;
    this.year=year;
    this.members = members;
  }
  
  public int getYear() {
    return year;
  }
  
  public List<String> getMembers() {
    return members;
  }
  
  public static List<MusicBand> groupsAfter2000(List<MusicBand> bands){
  List<Integer> list = new ArrayList<>();
  for(MusicBand musicBand : bands) {
    if(musicBand.getYear()>2000) {
        list.add(musicBand);
    }
  }
  return list;
}


public static void transferMembers(MusicBand band1, MusicBand band2){
  for(String member : band1.getMembers()) {
        band2.getMembers().add(member);
  }
  band1.getMembers().removeAll();
}


public static void printMembers(MusicBand musicBand){
  System.out.println(musicBand.getMembers());
}
  }
///////////////////////////////////////////////////////////////task5///////////////////////////
*Выполнять в подпапке task5 в day12* 
Скопировать MusicBand из прошлого задания и доработать - теперь у участника музыкальной группы есть не только имя, но и возраст. 
Соответственно, теперь под участником понимается не строка, а объект класса MusicArtist. Необходимо реализовать класс MusicArtist 
и доработать класс MusicBand (создать копию класса) таким образом, чтобы участники были - объекты класса MusicArtist. 
После этого, надо сделать то же самое, что и требовалось в 4 задании - слить две группы и проверить состав групп после слияния. 
Методы для слияния и для вывода участников в консоль необходимо тоже переработать, чтобы они работали с объектами класса MusicArtist.
public class MusicArtist{
  private String name;
  private int age;
  
  public MusicArtist(String name, int age){
    this.name=name;
    this.age=age;
  }
}

public class MusicBand{
  private String name;
  private int year;
  private List<MusicArtist> members;
  
  public MusicBand(String name, int year){
    this.name=name;
    this.year=year;
    this.members = members;
  }
  
  public int getYear() {
    return year;
  }
  
  public List<MusicArtist> getMembers() {
    return members;
  }
  
  public static List<MusicBand> groupsAfter2000(List<MusicBand> bands){
  List<Integer> list = new ArrayList<>();
  for(MusicBand musicBand : bands) {
    if(musicBand.getYear()>2000) {
        list.add(musicBand);
    }
  }
  return list;
}


public static void transferMembers(MusicBand band1, MusicBand band2){
  for(String member : band1.getMembers()) {
        band2.getMembers().add(member);
  }
  band1.getMembers().removeAll();
}


public static void printMembers(MusicBand musicBand){
  System.out.println(musicBand.getMembers());
}
  }




transferMembers(band1, band2);
printMembers(band1);
printMembers(band2);
