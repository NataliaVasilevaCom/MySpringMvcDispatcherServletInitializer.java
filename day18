/*
Вам дан числовой массив произвольного размера. Посчитайте сумму чисел в этом массиве не используя циклы (необходимо использовать рекурсивные вызовы).
Использовать статическое поле для хранения суммы не рекомендуется, такое решение нельзя назвать полноценно рекурсивным.

Пример:
int[] numbers = {1, 10, 1241, 50402, -50, 249, 10215, 665, 2295, 7, 311};
System.out.println(recursionSum(...)); // 65346

*recursionSum(...) - это ваш рекурсивный метод, который вернет сумму чисел в массиве numbers.
*/


/*
private int factorial(int n) {
    int result = 1;
    if (n == 1 || n == 0) {
        return result;
    }
    result = n * factorial(n-1);
    return result;
}
}*/

int[] numbers = {1, 10, 2};
System.out.println(recursionSum(...)); // 13

public int recursionSum(int[] numbers) {
  int result = 0;
  int ind = numbers.length-1;
    if(ind==0) {
        return result;
    }
  result = numbers[ind] + recursionSum(Arrays.copyOf(numbers, ind));
  return result;
}

/////////////////////////////////////////////task2
System.out.println(count7(717771237)); // 5
public int count7(int num) {
    String s = "" + num;
    int ind = s.length()-1;//7
    int result = 0;
    if(ind==0) {
            return result;
    }
    if(s.charAt(ind)=='7') {
        result = 1 + count7((int) num / 10);//1+
    }
    else {
        result = count7((int) num / 10);
    }
    return result;
  

  
    
  result = numbers[ind] + recursionSum(Arrays.copyOf(numbers, ind));
  return result;
}
////////////////TASK3/////////////////
public class Node {
   private int value; // ключ узла
   private Node leftChild; // Левый узел потомок
   private Node rightChild; // Правый узел потомок

        public int getValue() {
           return this.value;
       }
    
       public void setValue(final int value) {
           this.value = value;
       }
    Node rootNode = 20;

public void insertNode(int value) { // метод вставки нового элемента
       Node newNode = new Node(); // создание нового узла
       newNode.setValue(value); // вставка данных
       if (rootNode == null) { // если корневой узел не существует
           rootNode = newNode;// то новый элемент и есть корневой узел
       }
       else { // корневой узел занят
           Node currentNode = rootNode; // начинаем с корневого узла
           Node parentNode;
           while (true) // мы имеем внутренний выход из цикла
           {
               parentNode = currentNode;
               if(value == currentNode.getValue()) {   // если такой элемент в дереве уже есть, не сохраняем его
                    return;    // просто выходим из метода
                }
                else  if (value < currentNode.getValue()) {   // движение влево?
                   currentNode = currentNode.getLeftChild();
                   if (currentNode == null){ // если был достигнут конец цепочки,
                       parentNode.setLeftChild(newNode); //  то вставить слева и выйти из методы
                       return;
                   }
               }
               else { // Или направо?
                   currentNode = currentNode.getRightChild();
                   if (currentNode == null) { // если был достигнут конец цепочки,
                       parentNode.setRightChild(newNode);  //то вставить справа
                       return; // и выйти
                   }
               }
           }
       }
   }
}
