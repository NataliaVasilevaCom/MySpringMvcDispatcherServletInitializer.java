/**Создайте класс Человек (англ. Human). У человека должно быть поле “имя” (англ. name). На это поле в классе должен быть конструктор и get метод. Также, 
у Человека должен быть метод printInfo(), который выводит в консоль информацию о человеке в формате: “Этот человек с именем ИМЯ”.
Затем, создайте класс Студент (англ. Student), который наследуется от класса Человек. У студента есть дополнительное строковое поле - название его учебной 
группы (англ. groupName). Для этого поля тоже необходимо создать геттер. Конструктор в классе Студент должен принимать на вход два аргумента - имя и название 
учебной группы. Метод printInfo() в классе Студент должен быть переопределен таким образом, чтобы формат выводимого в консоль сообщения был таким: 
“Этот человек с именем ИМЯ”
“Этот студент с именем ИМЯ”
(должно выводиться именно две строки - необходимо использовать ключевое слово super)
И наконец, в нашей программе должна быть еще одна сущность - Преподаватель (англ. Teacher). Преподаватель должен тоже наследоваться от класса Человек. При этом, 
у преподавателя есть дополнительное строковое поле - “название предмета” (англ. subjectName), который ведет этот преподаватель. Для этого поля необходимо создать 
get метод. Конструктор в классе Преподаватель должен принимать на вход два аргумента - имя преподавателя и название преподаваемого предмета. Метод printInfo() 
в классе Преподаватель должен быть переопределен таким образом, чтобы формат выводимого в консоль сообщения был таким: 
“Этот человек с именем ИМЯ”
“Этот преподаватель с именем ИМЯ”.
(должно выводиться именно две строки - необходимо использовать ключевое слово super)
Создайте в методе main() класса Task1 объект класса Студент и объект класса Преподаватель. Выведите в консоль название учебной группы у объекта-студента и 
название предмета у объекта-преподавателя. Затем, вызовите printInfo() на объектах и посмотрите на результат.
*/
public class Human {
  private String subjectName;
  
  public Human(String name) {
    this.name = name;
  }
  
  public String getName() {
    return name;
  }
  
  public void printInfo() {
    System.out.println(“Этот человек с именем %s”, name);
  }
}

public class Student extends Human {
  private String groupName;

  public Student(String name, String groupName) {
    super(name);
    this.groupName = groupName;
  }  
  
  public String getGroupName() {
    return groupName;
  }
  
  @Override
  public void printInfo() {
    super.info();
    System.out.println(“Этот студент с именем %s”, name);
  }
}

public class Teacher extends Human {
  private String groupName;

  public Teacher(String name, String subjectName) {
    super(name);
    this.subjectName = subjectName;
  }  
  
  public String getSubjectName() {
    return subjectName;
  }
  
  @Override
  public void printInfo() {
    super.info();
    System.out.println(“Этот преподаватель с именем %s”, name);
  }
}




Student student = Student("Полина", "Английская группа");
Teacher teacher = Teacher("Юлия", "Английский язык");

System.out.println(student.getGroupName());
System.out.println(teacher.getSubjectName());

student.printInfo();
teacher.printInfo();
//////////////////////////////////////////////////////////task2
/**Создайте абстрактный класс Фигура (англ. Figure). Этот класс будет являться абстрактным представлением геометрической фигуры в нашей программе.
У всех фигур в нашей программе есть цвет, поэтому в классе Фигура есть строковое поле color. Создайте конструктор и геттер для этого поля.
У класса Фигура определены два абстрактных метода:
public abstract double area();
public abstract double perimeter(); 
Реализация первого метода должна возвращать площадь фигуры, а реализация второго метода должна возвращать периметр фигуры.
Создайте 3 геометрические фигуры: Круг (англ. Circle), Прямоугольник (англ. Rectangle) и Треугольник (англ. Triangle). Каждая из фигур должна наследоваться 
от абстрактного класса Фигура (англ. Figure).
У класса Круг будет одно поле - радиус окружности.
У класса Прямоугольник будет два поля - ширина и высота.
У класса Треугольник будет три поля - длина каждой из сторон.
Для каждого из этих трех классов необходимо реализовать конструктор, который принимает на вход размерности фигуры и цвет фигуры.
В этих же классах, вам необходимо реализовать два метода (area() и perimeter()). Реализация этих методов будет разной для каждой из геометрических фигур. 
Формулы для вычисления площади и периметра легко находятся в интернете.
После того, как геометрические фигуры будут полностью реализованы, вам необходимо будет реализовать еще один класс - TestFigures. В этом классе, в методе 
main() должны быть созданы и помещены в массив следующие геометрические фигуры:
Figure[] figures = {
        new Triangle(10, 10, 10, "Red"),
        new Triangle(10, 20, 30, "Green"),
        new Triangle(10, 20, 15, "Red"),
        new Rectangle(5, 10, "Red"),
        new Rectangle(40, 15, "Orange"),
        new Circle(4, "Red"),
        new Circle(10, "Red"),
        new Circle(5, "Blue")
};

В этом же классе реализуйте два метода:
public static double calculateRedPerimeter(Figure[] figures)
public static double calculateRedArea(Figure[] figures) 

Первый метод, принимая на вход массив геометрических фигур, должен вернуть сумму периметров красных фигур. Второй метод, принимая на вход массив геометрических 
фигур, должен вернуть сумму площадей красных фигур. 
Вызовите эти два метода на массиве figures и выведите результат в консоль.

* В java есть константа Math.PI, используйте ее, вместо ручного ввода 3,14
* При сравнении строки с объектом из массива, на первом месте указывайте строку, пример “Red”.equals(figures[i].getColor())
Записывая наоборот figures[i].getColor().equals(”Red”), есть вероятность получить NullPointerException в случае, когда у фигуры в поле color будет null. 
Проверить это утверждение можно создав какую-нибудь фигуру с цветом null. Пример new Triangle(10, 20, 30, null).
*/
public abstract class Figure{
  public String color;
  
  public Figure(String color) {
    this.color = color;
  }
  
  public String getColor() {
    return color;
  }
  
  public abstract double area();
  
  public abstract double perimeter();
}




public class Circle extends Figure {
  private double circleRadius;
}

public class Rectangle extends Figure {
  private double height;
  private double width;
}

public class Triangle extends Figure {
  private double length1;
  private double length2;
  private double length3;
}
